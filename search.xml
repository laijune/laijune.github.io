<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>云AI平台实战</title>
    <url>/2022/07/07/Cloud%20AI/</url>
    <content><![CDATA[<h3 id="制作微信名片"><a href="#制作微信名片" class="headerlink" title="制作微信名片"></a>制作微信名片</h3><hr>
<p><strong>初始环境，配置网络，能 PING 通外网</strong></p>
<p><strong>配置 YUM 源</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /dvd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sr0 /dvd/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/yum.repos.d/local.repo</span></span><br><span class="line">[<span class="built_in">local</span>]</span><br><span class="line">name = This is <span class="built_in">local</span> repo</span><br><span class="line">baseurl = file:///dvd</span><br><span class="line">enabled = 1</span><br><span class="line">gpgcheck = 0</span><br><span class="line">[root@localhost ~]<span class="comment"># yum clean all</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum repolist</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>



<p><strong>安装软件包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install epel-release</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install python36 python36u-pip python36u-redis python36-numpy</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install python36-devel</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install zlib-devel</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install libjpeg-turbo-devel</span></span><br></pre></td></tr></table></figure>



<p><strong>配置 pip</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir .pip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd .pip/</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># vim pip.conf</span></span><br><span class="line">[global]</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br><span class="line"></span><br><span class="line">安装gcc,以免安装MyQR报错</span><br><span class="line">[root@localhost .pip]<span class="comment"># yum -y install gcc* </span></span><br><span class="line">安装MyQR</span><br><span class="line">[root@localhost .pip]<span class="comment"># pip3 install MyQR</span></span><br></pre></td></tr></table></figure>



<p><strong>安装 zbar、pyzbar、pillow</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost .pip]<span class="comment"># cd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install zbar</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pip3 install pyzbar pillow</span></span><br></pre></td></tr></table></figure>



<p><strong>编写微信名片图像解码程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;文件名&#x27;</span>无所谓,以.py结尾</span><br><span class="line">[root@localhost ~]<span class="comment"># vim decode.py</span></span><br><span class="line">from pyzbar.pyzbar import decode</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">image=<span class="string">&quot;wx.jpg&quot;</span>										<span class="comment"># 这里图片路径在当前目录 /root/ 目录下,注意文件名和格式要一致;物理机的话建议scp</span></span><br><span class="line">img = Image.open(image)</span><br><span class="line">barcodes = decode(img)</span><br><span class="line"><span class="keyword">for</span> barcode <span class="keyword">in</span> barcodes:</span><br><span class="line">        url = barcode.data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        </span><br><span class="line">[root@localhost ~]<span class="comment"># python3 decode.py </span></span><br><span class="line">https://u.wechat.com/MFSMySpvW2Ec2mJUjK7cn0M        <span class="comment"># 获得输出链接,复制</span></span><br></pre></td></tr></table></figure>



<p><strong>编写微信代码</strong></p>
<p>动态图片背景<strong>（gif）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;文件名&#x27;</span>无所谓,以.py结尾					</span><br><span class="line"><span class="comment"># 原图片路径(picture)在/root/Desktop/222.gif</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim myqr_wx2.py</span></span><br><span class="line">from MyQR import myqr</span><br><span class="line">myqr.run(words=<span class="string">&quot;https://u.wechat.com/MFSMySpvW2Ec2mJUjK7cn0M&quot;</span>,version=3,picture=<span class="string">&quot;/root/Desktop/222.gif&quot;</span>,colorized=True,</span><br><span class="line">        save_name=<span class="string">&quot;233.gif&quot;</span>,			注意这里的后缀只能是<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>,建议<span class="string">&#x27;.gif&#x27;</span></span><br><span class="line">        save_dir=<span class="string">&quot;/root/Desktop&quot;</span>)		输出路径</span><br><span class="line"></span><br><span class="line">这里直接执行py文件可能由于numpy版本过高报错,需要安装低版本</span><br><span class="line">[root@localhost ~]<span class="comment"># pip3 install imageio==2.13.5</span></span><br><span class="line">再次执行py文件</span><br><span class="line">[root@localhost ~]<span class="comment"># python3 myqr_wx2.py</span></span><br><span class="line">line 16: mode: byte</span><br></pre></td></tr></table></figure>



<h3 id="标识人脸特征"><a href="#标识人脸特征" class="headerlink" title="标识人脸特征"></a>标识人脸特征</h3><hr>
<p><strong>安装环境</strong></p>
<p><code>在Python官网下载 python-3.6.6-amd64.exe,如果有其它版本记得先卸载</code></p>
<img src="/2022/07/07/Cloud%20AI/image-20220711220012434.png" alt="image-20220711220012434" style="zoom:50%;">



<p><strong>以下命令在cmd操作</strong>        👇</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">检验 python</span><br><span class="line">C:\Users\Lai&gt;python --version</span><br><span class="line">Python 3.6.6		👈 版本</span><br><span class="line"></span><br><span class="line">在当前目录新建pip文件夹,写一个<span class="string">&#x27;pip.ini&#x27;</span>文件</span><br><span class="line"><span class="comment"># 内容如下,注意扩展名是ini</span></span><br><span class="line">[global]</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<img src="/2022/07/07/Cloud%20AI/2.png" alt="2" style="zoom: 67%;">



<p><strong>安装人脸检测相关的包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载 Pillow</span><br><span class="line">C:\Users\Lai&gt;pip install Pillow==7.0.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">安装 CMake</span><br><span class="line">C:\Users\Lai&gt;pip install CMake</span><br><span class="line"></span><br><span class="line">安装 dlib</span><br><span class="line">C:\Users\Lai&gt;pip install dlib==19.8.1</span><br><span class="line"></span><br><span class="line">安装 face_recognition</span><br><span class="line">C:\Users\Lai&gt;pip install face_recognition</span><br></pre></td></tr></table></figure>



<p><strong>编写人脸识别特征程序</strong></p>
<p><code>写一个face_1.py文件,内容如下    👇</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import face_recognition</span><br><span class="line"></span><br><span class="line">from PIL import Image,ImageDraw</span><br><span class="line"></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">&quot;G312xixi.jpg&quot;</span>)				</span><br><span class="line"></span><br><span class="line">face_landmarks_list = face_recognition.face_landmarks(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I found &#123;&#125; face(s) in this photograph.&quot;</span>.format(len(face_landmarks_list)))</span><br><span class="line"></span><br><span class="line">pil_image = Image.fromarray(image)</span><br><span class="line">d = ImageDraw.Draw(pil_image)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">for</span> face_landmarks <span class="keyword">in</span> face_landmarks_list:</span><br><span class="line">	<span class="keyword">for</span> facial_feature <span class="keyword">in</span> face_landmarks.keys():</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;The &#123;&#125; in this face has the following points:&#123;&#125;&quot;</span>.format(facial_feature,face_landmarks[facial_feature]))</span><br><span class="line">	<span class="keyword">for</span> facial_feature <span class="keyword">in</span> face_landmarks.keys():</span><br><span class="line">		d.line(face_landmarks[facial_feature],width=5)</span><br><span class="line"></span><br><span class="line">pil_image.show()</span><br></pre></td></tr></table></figure>

<p>运行程序即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Lai&gt;python face_1.py</span><br></pre></td></tr></table></figure>

<img src="/2022/07/07/Cloud%20AI/1.png" alt="image-20220711230350855" style="zoom: 80%;">



]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>云容器平台实战</title>
    <url>/2022/07/01/Cloud%20Container/</url>
    <content><![CDATA[<p><code>初始快照</code></p>
<h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>①部署 IP，能联通外网</p>
<p>②清除防火墙规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># iptables -F</span></span><br><span class="line">[root@localhost ~]<span class="comment"># iptables -X</span></span><br><span class="line">[root@localhost ~]<span class="comment"># iptables -Z</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /usr/sbin/iptables-save</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/selinux/config </span></span><br><span class="line">...</span><br><span class="line">SELINUX=disabled		将enforcing改成disabled</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>③关闭 swap 交换分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># swapoff -a</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/fstab </span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br><span class="line">注释这一行	↑</span><br></pre></td></tr></table></figure>

<p>④路由转发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysctl.conf </span></span><br><span class="line">...			添加以下三行	↓</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"></span><br><span class="line">加载模块</span><br><span class="line">[root@localhost ~]<span class="comment"># modprobe br_netfilter</span></span><br><span class="line">从刚刚写的文件里读取值</span><br><span class="line">[root@localhost ~]<span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure>

<p>⑤物理机 scp 上传<code>Kubernetes.zip</code>文件</p>
<p>再解压.zip文件</p>
<p><code>[root@localhost ~]# unzip Kubernetes.zip </code></p>
<p>⑥先备份<code>/etc/yum.repos.d/</code>下的所有 Centos-xxx 文件，再配置本地 yum 源（只留这一个文件）</p>
<p>⑦重启服务</p>
<p><code>[root@localhost Kubernetes]# systemctl restart network</code></p>
<p>⑧安装 docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install docker*</span></span><br><span class="line"></span><br><span class="line">启动docker服务并设置开机自启</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker ; systemctl enable docker</span></span><br><span class="line"></span><br><span class="line">查看docker信息</span><br><span class="line">[root@localhost ~]<span class="comment"># docker info</span></span><br><span class="line"></span><br><span class="line">重启加载服务</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl daemon-reload </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker ; systemctl enable docker</span></span><br></pre></td></tr></table></figure>



<h5 id="部署-MySQL-容器"><a href="#部署-MySQL-容器" class="headerlink" title="部署 MySQL 容器"></a>部署 MySQL 容器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">拉取mysql映像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull mysql</span></span><br><span class="line"></span><br><span class="line">创建mysql容器</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 --name db_mysql_wordpress mysql</span></span><br><span class="line"></span><br><span class="line">进入mysql容器,按题目要求创建数据库和表</span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it db_mysql_wordpress /bin/bash</span></span><br><span class="line">bash-4.4<span class="comment"># mysql -uroot -p123456</span></span><br><span class="line"></span><br><span class="line">mysql&gt; create database SZPT;</span><br><span class="line">mysql&gt; use SZPT;</span><br><span class="line">mysql&gt; create table Cloud(stuno varchar(8),stuname varchar(8),stulaojia varchar(8),stuage varchar(2));</span><br><span class="line">mysql&gt; insert into Cloud(stuno,stuname,stulaojia,stuage) values</span><br><span class="line">    -&gt; (<span class="string">&#x27;20940702&#x27;</span>,<span class="string">&#x27;xiaolai&#x27;</span>,<span class="string">&#x27;meizhou&#x27;</span>,<span class="string">&#x27;20&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;20940715&#x27;</span>,<span class="string">&#x27;xiaoding&#x27;</span>,<span class="string">&#x27;hunan&#x27;</span>,<span class="string">&#x27;20&#x27;</span>),    </span><br><span class="line">    -&gt; (<span class="string">&#x27;20940700&#x27;</span>,<span class="string">&#x27;zhiquan&#x27;</span>,<span class="string">&#x27;maoming&#x27;</span>,<span class="string">&#x27;21&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;20940688&#x27;</span>,<span class="string">&#x27;youjun&#x27;</span>,<span class="string">&#x27;shenzhen&#x27;</span>,<span class="string">&#x27;20&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;20940676&#x27;</span>,<span class="string">&#x27;xiaopan&#x27;</span>,<span class="string">&#x27;zhuhai&#x27;</span>,<span class="string">&#x27;20&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;18240683&#x27;</span>,<span class="string">&#x27;xixi&#x27;</span>,<span class="string">&#x27;shenzhen&#x27;</span>,<span class="string">&#x27;22&#x27;</span>),</span><br><span class="line">    -&gt; (<span class="string">&#x27;20940680&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;shenzhen&#x27;</span>,<span class="string">&#x27;19&#x27;</span>);</span><br><span class="line">mysql&gt; select * from Cloud <span class="built_in">where</span> Cloud.stuage=<span class="string">&#x27;20&#x27;</span>;			<span class="string">&#x27;本人年龄&#x27;</span></span><br><span class="line">    </span><br><span class="line">退出(<span class="built_in">exit</span>)</span><br><span class="line">导出<span class="string">&#x27;mysql&#x27;</span>映像tar包</span><br><span class="line">[root@localhost ~]<span class="comment"># docker save -o mysql.tar mysql</span></span><br></pre></td></tr></table></figure>



<h5 id="安装-wordpress"><a href="#安装-wordpress" class="headerlink" title="安装 wordpress"></a>安装 wordpress</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">拉取wordpress映像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull wordpress</span></span><br><span class="line"></span><br><span class="line">创建wordpress容器</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d --link db_mysql_wordpress -p 9090:80 --name wb_wordpress wordpress</span></span><br><span class="line"></span><br><span class="line">关闭防火墙</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop firewalld</span></span><br></pre></td></tr></table></figure>



<p><strong>浏览器访问即可</strong></p>
<p>IP地址/9090</p>
<img src="/2022/07/01/Cloud%20Container/image-20220709205122302.png" alt="image-20220709205122302" style="zoom:50%;">



<p>后续根据需求 post 博客即可~</p>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习</title>
    <url>/2022/07/14/Machine%20learning/</url>
    <content><![CDATA[<h4 id="搭建私有仓库，上传-tensorflow-镜像"><a href="#搭建私有仓库，上传-tensorflow-镜像" class="headerlink" title="搭建私有仓库，上传 tensorflow 镜像"></a>搭建私有仓库，上传 tensorflow 镜像</h4><p><strong>① 配置网络，能连通外网</strong></p>
<p><strong>② 安装docker</strong></p>
<p>参考上篇的云容器平台实战，此处省略。。。</p>
<span id="more"></span>



<p><strong>③ cc网下载<code> images.zip</code>文件，上传<code> images</code>文件</strong>（<code>scp</code>，<code>WinSCP</code>，<code>XFTP</code>，<code>SecureCRT</code>)</p>
<p>​    先在物理机解压，再上传<code>image</code>文件   👇</p>
<p>​    <code>scp -r images root@192.168.169.10:/root</code></p>
<p><strong>④ 将<code>registry_latest.tar</code>映像导入</strong>     </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker load -i images/registry_latest.tar</span></span><br><span class="line">查看registry映像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br></pre></td></tr></table></figure>



<p><strong>⑤创建一个 registry 容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d --name registry -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always registry:latest</span></span><br><span class="line"></span><br><span class="line">查看容器</span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br></pre></td></tr></table></figure>



<p><strong>⑥ 配置仓库地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.169.10:5000&quot;</span>]		<span class="comment"># 虚拟机IP:5000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">重新加载模块、重启docker</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line">访问测试</span><br><span class="line">[root@localhost ~]<span class="comment"># curl http://192.168.169.10:5000/v2</span></span><br><span class="line">&lt;a href=<span class="string">&quot;/v2/&quot;</span>&gt;Moved Permanently&lt;/a&gt;.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># curl http://192.168.169.10:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure>



<p><strong>⑦ 上传 TensorFlow 镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载tensorflow镜像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull daocloud.io/daocloud/tensorflow:1.14.0-py3-jupyter</span></span><br><span class="line"></span><br><span class="line">查看tensorflow镜像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                        TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">daocloud.io/daocloud/tensorflow   1.14.0-py3-jupyter   fe3f97fcb6ce        3 years ago         1.34 GB</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">给tensorflow打标签</span><br><span class="line">[root@localhost ~]<span class="comment"># docker tag daocloud.io/daocloud/tensorflow:1.14.0-py3-jupyter 192.168.169.10:5000/tensorflow</span></span><br><span class="line"></span><br><span class="line">上传镜像到私有仓库</span><br><span class="line">[root@localhost ~]<span class="comment"># docker push 192.168.169.10:5000/tensorflow</span></span><br></pre></td></tr></table></figure>



<p><strong>⑧ 访问测试</strong></p>
<p>浏览器 <code>http://192.168.169.10:5000/v2/_catalog</code>    </p>
<img src="/2022/07/14/Machine%20learning/image-20220713004722801.png" alt="image-20220713004722801" style="zoom: 80%;">





<h4 id="识别手写数字"><a href="#识别手写数字" class="headerlink" title="识别手写数字"></a>识别手写数字</h4><hr>
<p><strong>① 创建 tensorflow 容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -it --name my-tensorflow -p 8888:8888 -v ~/tensorflow:/test/data daocloud.io/daocloud/tensorflow:1.14.0-py3-jupyter </span></span><br><span class="line">...output omitted...</span><br><span class="line">    Or copy and <span class="built_in">paste</span> one of these URLs:</span><br><span class="line">        http://(480dd667b304 or 127.0.0.1):8888/?token=a6a8f826b5fc2e2142bd2643930b68bebf6ae790e53cd1d8</span><br><span class="line"></span><br><span class="line">访问 👉 http://<span class="string">&#x27;IP地址&#x27;</span>:8888/?token=a6a8f826b5fc2e2142bd2643930b68bebf6ae790e53cd1d8</span><br></pre></td></tr></table></figure>

<p>![image-20220713093014367](Machine learning/image-20220713093014367.png)</p>
<p><strong>② 上传<code>mnist.npz</code>和<code>手写数字</code></strong> </p>
<img src="/2022/07/14/Machine%20learning/image-20220713094229703.png" alt="image-20220713094229703" style="zoom:50%;">



<p><strong>③ 编写模拟训练程序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data=np.load(<span class="string">&#x27;mnist.npz&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x_train,y_train,x_test,y_test=data[<span class="string">&#x27;x_train&#x27;</span>],data[<span class="string">&#x27;y_train&#x27;</span>],data[<span class="string">&#x27;x_test&#x27;</span>],data[<span class="string">&#x27;y_test&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x_train = tf.keras.utils.normalize(x_train,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x_test = tf.keras.utils.normalize(x_test,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Sequential()</span><br><span class="line"></span><br><span class="line">model.add(tf.keras.layers.Flatten(input_shape=(<span class="number">28</span>,<span class="number">28</span>)))</span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">999</span>,activation=tf.nn.relu))</span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">999</span>,activation=tf.nn.relu))</span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">10</span>,activation=tf.nn.softmax))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">             loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>,</span><br><span class="line">             metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train,y_train,epochs=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">val_loss,val_acc=model.evaluate(x_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(val_loss)</span><br><span class="line"><span class="built_in">print</span>(val_acc)</span><br><span class="line"></span><br><span class="line">model.save(<span class="string">&#x27;my_model.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>



<p><strong>④ 安装imageio</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install imageio -i https://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure>



<p><strong>⑤ 导入测试图片</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image_file_name <span class="keyword">in</span> glob.glob(<span class="string">&#x27;img_?.jpg&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loading ...&quot;</span>,image_file_name)</span><br><span class="line">        img_array = imageio.imread(image_file_name,as_gray=<span class="literal">True</span>)</span><br><span class="line">        img_data.append((<span class="number">255.0</span> - img_array.reshape(<span class="number">784</span>)) / <span class="number">255.0</span>)</span><br><span class="line">        self_data = np.array(img_data).reshape(<span class="built_in">len</span>(img_data),<span class="number">28</span>,<span class="number">28</span>)</span><br></pre></td></tr></table></figure>



<p><strong>⑥ 进行预测</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">pre = model.predict(self_data)</span><br><span class="line">predit=[<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">predit[<span class="number">0</span>]=np.argmax(pre[<span class="number">9</span>])</span><br><span class="line">predit[<span class="number">1</span>]=np.argmax(pre[<span class="number">8</span>])</span><br><span class="line">predit[<span class="number">2</span>]=np.argmax(pre[<span class="number">7</span>])</span><br><span class="line">predit[<span class="number">3</span>]=np.argmax(pre[<span class="number">6</span>])</span><br><span class="line">predit[<span class="number">4</span>]=np.argmax(pre[<span class="number">5</span>])</span><br><span class="line">predit[<span class="number">5</span>]=np.argmax(pre[<span class="number">4</span>])</span><br><span class="line">predit[<span class="number">6</span>]=np.argmax(pre[<span class="number">3</span>])</span><br><span class="line">predit[<span class="number">7</span>]=np.argmax(pre[<span class="number">2</span>])</span><br><span class="line">predit[<span class="number">8</span>]=np.argmax(pre[<span class="number">1</span>])</span><br><span class="line">predit[<span class="number">9</span>]=np.argmax(pre[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(predit)</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 远程桌面 Windows</title>
    <url>/2022/10/14/Linux%20Remote%20Windows%20&amp;%20Linux/</url>
    <content><![CDATA[<p><font color="red">上一章我们尝试了 windows 远程连接 Linux 的机器，只需要在 Linux 客户端上安装 xrdp 工具并开启服务即可，这次我们尝试 Linux 连接 Windows，还有 Linux 连接 Linux . . . </font></p>
<p>Linux 远程连接 Windows 有两种方法，rdesktop 和 freerdp；</p>
<p>Ubuntu 安装这两种包很方便，只需 apt install rdesktop 或 apt install freerdp 即可，因为 Ubuntu 是基于 Debain 架构的；</p>
<p>CentOS 系列安装则费劲很多，因为需要额外安装其它的依赖包</p>
<h2 id="安装-rdesktop"><a href="#安装-rdesktop" class="headerlink" title="安装 rdesktop"></a>安装 rdesktop</h2><blockquote>
<p><strong>rdesktop</strong> 是一个用于连接到 Windows 远程桌面服务的开源 UNIX 客户端，能够原生使用远程桌面协议 (RDP) 来呈现用户的 Windows 桌面。</p>
<p>rdesktop 已知可与 Windows 服务器版本（从 NT 4 终端服务器到 Windows Server 2016）一起工作。</p>
<p>本次客户端安装的版本是 CentOS Stream 9</p>
</blockquote>
<p><strong>准备工作</strong></p>
<ol>
<li>配置网络，能联通外网</li>
</ol>
<ol start="2">
<li>从 github 上下载 rdesktop 的压缩包，链接 <a href="https://github.com/rdesktop/rdesktop">https://github.com/rdesktop/rdesktop</a></li>
</ol>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget https://github.com/rdesktop/rdesktop/releases/download/v1.9.0/rdesktop-1.9.0.tar.gz</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xf rdesktop-1.9.0.tar.gz </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd rdesktop-1.9.0/</span></span><br><span class="line"></span><br><span class="line">- 编译过程中会出现各种报错，是由于依赖的安装包未安装的原因，安装对应的依赖包即可</span><br><span class="line">- 安装缺少的依赖包</span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install python3-pip</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install python-devel</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install libX11-devel </span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install gcc g++</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install krb5-devel</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install libtasn1-devel</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install libXcursor-devel</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install gnutls-devel</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># python3 -m pip install gssapi</span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># dnf -y install pcsc-lite</span></span><br><span class="line">...</span><br><span class="line">Installed:</span><br><span class="line">  pcsc-lite-1.9.4-1.el9.x86_64                    pcsc-lite-ccid-1.4.36-1.el9.x86_64                    pcsc-lite-libs-1.9.4-1.el9.x86_64    </span><br><span class="line">  </span><br><span class="line">- 根据版本号需要安装对应的 pcsc-lite-devel 安装包 </span><br><span class="line">- 在此链接 http://www.rpmfind.net/linux/rpm2html/search.php?query=pcsc-lite-devel</span><br><span class="line">- 安装包选择: pcsc-lite-devel	System: centos	Arch: x86_64</span><br><span class="line">&gt; 因为我们安装pcsc的版本是1.9.4，所以选择<span class="string">&#x27;pcsc-lite-devel-1.9.4-1.el9.x86_64.rpm&#x27;</span>版本,</span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># wget http://www.rpmfind.net/linux/centos-stream/9-stream/CRB/x86_64/os/Packages/pcsc-lite-devel-1.9.4-1.el9.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># rpm -i pcsc-lite-devel-1.9.4-1.el9.x86_64.rpm </span></span><br><span class="line"><span class="comment"># 如果选择的版本不是一样的话,是无法安装成功的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编译，安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- okay,安装完依赖包后,再使用./configure进行编译安装</span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># ./configure </span></span><br><span class="line">...</span><br><span class="line">configure: creating ./config.status</span><br><span class="line">config.status: creating Makefile		👈	看到这则说明编译成功了</span><br><span class="line"></span><br><span class="line">- 最后输入下面命令,完成安装</span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># make </span></span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>



<ul>
<li><strong><font color="blue">连接 Windows</font></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 使用 rdesktop 远程连接</span><br><span class="line">[root@localhost rdesktop-1.9.0]<span class="comment"># rdesktop 192.168.0.193		#客户端IP,默认是3389端口</span></span><br><span class="line">...</span><br><span class="line">Do you trust this certificate (<span class="built_in">yes</span>/no)? 【<span class="built_in">yes</span>】</span><br></pre></td></tr></table></figure>





<img src="/2022/10/14/Linux%20Remote%20Windows%20&%20Linux/image-20221011221251445.png" alt="image-20221011221251445" style="zoom:80%;">





<ul>
<li><strong><font color="brown">连接 Linux 服务端</font></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 当然,Linux之间也可以通过 rdesktop 实现	<span class="comment"># 前提是服务端的Linux配置好了xrdp等服务并启动</span></span><br><span class="line">-g	指定屏幕分辨率</span><br><span class="line">-u	指定用户名</span><br><span class="line">-p 	指定密码</span><br><span class="line">[root@localhost ~]<span class="comment"># rdesktop -g 90% -u root 10.10.10.10		# 默认是3389端口</span></span><br></pre></td></tr></table></figure>

<img src="/2022/10/14/Linux%20Remote%20Windows%20&%20Linux/xrdp.gif" alt="xrdp" style="zoom:95%;">



<h2 id="安装-freerdp"><a href="#安装-freerdp" class="headerlink" title="安装 freerdp"></a>安装 freerdp</h2><blockquote>
<p>FreeRDP 是一个 Remote Desktop Protocol（协议）的一个实现，遵循Apache开源协议，支持3D功能，并有较高刷新率，也支持RemoteFX，H264编解码，用户管理，音频以及外设重定向等功能。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 安装freerdp软件包</span><br><span class="line">[root@localhost ~]<span class="comment"># dnf -y install freerdp</span></span><br><span class="line"></span><br><span class="line">- 然后就可以直接使用了,freerdp 在 centos 和 ubuntu 都可以直接安装</span><br><span class="line">&gt; 非交互式</span><br><span class="line">[root@localhost ~]<span class="comment"># xfreerdp -u user -p passwd -v 192.168.0.193</span></span><br><span class="line"></span><br><span class="line">&gt; 交互式</span><br><span class="line">[root@localhost ~]<span class="comment"># xfreerdp -u user -v 192.168.0.193</span></span><br><span class="line">Password:【密码】</span><br><span class="line"></span><br><span class="line">-u 	指定用户名</span><br><span class="line">-p	指定密码</span><br><span class="line">-w	wide 宽</span><br><span class="line">-h	high 高</span><br><span class="line">-f 	full,屏幕全屏,但是这样不好退出哈哈,屏占比拉满😂</span><br><span class="line">- [root@localhost ~]<span class="comment"># xfreerdp -u root -p redhat -w 1920 -h 1080 -v 10.10.10.10</span></span><br></pre></td></tr></table></figure>

<img src="/2022/10/14/Linux%20Remote%20Windows%20&%20Linux/freerdp.gif" alt="freerdp" style="zoom:95%;">

]]></content>
      <categories>
        <category>RDP</category>
      </categories>
      <tags>
        <tag>rdesktop</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 远程桌面 Linux</title>
    <url>/2022/10/07/Windows%20Remote%20Linux/</url>
    <content><![CDATA[<blockquote>
<p>注意：RHEL9系列（包括rhel）的版本在安装软件时会出现不成功的情况，这应该和 rhel 的默认源和订阅有关；</p>
<p>在 CentOS 和 CentOS Stream 系列不会出现这个问题，最小化安装和图形化安装（GUI）都可以配置</p>
</blockquote>
<p><strong>本次实验使用的是最小化安装，无图形界面</strong></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>配置网络，能上外网 </li>
</ol>
<ol start="2">
<li>配置 aliyun 的 epel 源，链接 <a href="http://www.aliyun.com/">www.aliyun.com</a> ，搜索 epel</li>
</ol>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; 下载新repo 到/etc/yum.repos.d/【下面例子以CentOS Stream 9做演示】</span><br><span class="line"></span><br><span class="line">- 安装epel配置包</span><br><span class="line">yum install -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm</span><br><span class="line"><span class="comment">#注意: 如果是centos 7,则直接安装epel-release就可以安装xrdp了,不需要替换epel源,否则会提示使用yum命令失败</span></span><br><span class="line"></span><br><span class="line">- 将repo配置中的地址替换为阿里云镜像站地址</span><br><span class="line">sed -i <span class="string">&#x27;s|^#baseurl=https://download.example/pub|baseurl=https://mirrors.aliyun.com|&#x27;</span> /etc/yum.repos.d/epel*</span><br><span class="line">sed -i <span class="string">&#x27;s|^metalink|#metalink|&#x27;</span> /etc/yum.repos.d/epel*</span><br></pre></td></tr></table></figure>



<h2 id="安装-xrdp-和-xorgxrdp"><a href="#安装-xrdp-和-xorgxrdp" class="headerlink" title="安装 xrdp 和 xorgxrdp"></a>安装 xrdp 和 xorgxrdp</h2><blockquote>
<p><a href="http://www.xrdp.org/">Xrdp</a>是一个开源工具，允许用户通过 Windows <a href="https://so.csdn.net/so/search?q=RDP&spm=1001.2101.3001.7020">RDP</a> 访问 Linux 远程桌面。除了 Windows RDP，xrdp 工具还接受来自其他 RDP 客户端的连接，如 FreeRDP、rdesktop 和 NeutrinoRDP。Xrdp 现在支持 <a href="https://github.com/neutrinolabs/xrdp/wiki/TLS-security-layer">TLS 安全层</a>。</p>
<p>xrdp 只是一个壳，提供一个远程连接的<strong>加密</strong>通道。</p>
<p>Xorg 是共享机器的资源。每次连接一个新用户，都会创建一个新的session，创建一个新的桌面。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dnf -y install xrdp xorgxrdp</span></span><br><span class="line"></span><br><span class="line">修改配置文件</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/xrdp/xrdp.ini</span></span><br><span class="line">...</span><br><span class="line">[Globals]</span><br><span class="line">; xrdp.ini file version number</span><br><span class="line">ini_version=1</span><br><span class="line"></span><br><span class="line">; fork a new process <span class="keyword">for</span> each incoming connection</span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">; ports to listen on, number alone means listen on all interfaces</span><br><span class="line">; 0.0.0.0 or :: <span class="keyword">if</span> ipv6 is configured</span><br><span class="line">; space between multiple occurrences</span><br><span class="line">; ALL specified interfaces must be UP when xrdp starts, otherwise xrdp will fail to start</span><br><span class="line">;</span><br><span class="line">; Examples:</span><br><span class="line">;   port=3389</span><br><span class="line">;   port=unix://./tmp/xrdp.socket</span><br><span class="line">;   port=tcp://.:3389                           127.0.0.1:3389</span><br><span class="line">;   port=tcp://:3389                            *:3389</span><br><span class="line">;   port=tcp://&lt;any ipv4 format addr&gt;:3389      192.168.1.1:3389</span><br><span class="line">;   port=tcp6://.:3389                          ::1:3389</span><br><span class="line">;   port=tcp6://:3389                           *:3389</span><br><span class="line">;   port=tcp6://&#123;&lt;any ipv6 format addr&gt;&#125;:3389   &#123;FC00:0:0:0:0:0:0:1&#125;:3389</span><br><span class="line">;   port=vsock://&lt;cid&gt;:&lt;port&gt;</span><br><span class="line">port=3389		👈	【Global】下的port是远程连接桌面时开放的端口,windows远程连接必须开放3389</span><br><span class="line"></span><br><span class="line">[Xorg]			👈	【xorg】默认是注释,不启用的;去掉<span class="string">&#x27;#&#x27;</span>,开放Xorg会话</span><br><span class="line">name=Xorg</span><br><span class="line">lib=libxup.so</span><br><span class="line">username=ask</span><br><span class="line">password=ask</span><br><span class="line">ip=127.0.0.1</span><br><span class="line">port=-1</span><br><span class="line">code=20</span><br><span class="line"></span><br><span class="line"><span class="comment">#[Xvnc]			👈	【Xvnc】默认启用Xvnc会话,注释,不启用. </span></span><br><span class="line"><span class="comment">#name=Xvnc</span></span><br><span class="line"><span class="comment">#lib=libvnc.so</span></span><br><span class="line"><span class="comment">#username=ask</span></span><br><span class="line"><span class="comment">#password=ask</span></span><br><span class="line"><span class="comment">#ip=127.0.0.1</span></span><br><span class="line"><span class="comment">#port=-1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里选择使用 <strong>Xorg</strong> 会话而不是 Xvnc，Xvnc 好像要和 tigerVNC 配合的。我没装 tigerVNC</p>
</blockquote>
<ul>
<li>开放防火墙所在区域需要远程连入端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --get-default-zone</span></span><br><span class="line">public</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --zone=public --add-port=3389/tcp --permanent</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要配置公网IP连入的端口,则开放公网连接的端口即可</span></span><br></pre></td></tr></table></figure>



<ul>
<li>重启 xrdp 服务，远程接入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl restart xrdp</span></span><br></pre></td></tr></table></figure>

<img src="/2022/10/07/Windows%20Remote%20Linux/image-20221009105031756.png" alt="image-20221009105031756" style="zoom:80%;">

<img src="/2022/10/07/Windows%20Remote%20Linux/image-20221009105259323.png" alt="image-20221009105259323" style="zoom:80%;">





<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 添加用户,设置密码</span><br><span class="line">[root@localhost ~]<span class="comment"># for i in &#123;1..2&#125;; do useradd stu$i; done</span></span><br><span class="line">[root@localhost ~]<span class="comment"># for i in &#123;1..2&#125;; do echo redhat | passwd --stdin stu$i; done</span></span><br><span class="line">Changing password <span class="keyword">for</span> user stu1.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">Changing password <span class="keyword">for</span> user stu2.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>此时远程登录用户是会直接退出会话的，因为我们是最小化安装，还没有桌面，无法进入远程界面</strong></li>
</ul>
<img src="/2022/10/07/Windows%20Remote%20Linux/stu1.gif" alt="stu1" style="zoom:80%;">





<blockquote>
<p><strong>如果是安装了图形化界面的CentOS，此时就可以直接进入自带的 GNOME 桌面了</strong></p>
<p>GNOME 是一个完全由自由软件组成的桌面环境</p>
</blockquote>
<img src="/2022/10/07/Windows%20Remote%20Linux/stu1-2.gif" alt="stu1-2" style="zoom:80%;">



<p><strong><font color="purple">不过默认安装的GNOME桌面环境，在资源要求较高的情况下，会比较卡顿，这时可以安装openbox轻量级的图形桌面</font></strong></p>
<h2 id="安装-openbox"><a href="#安装-openbox" class="headerlink" title="安装 openbox"></a>安装 openbox</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 安装openbox轻巧窗口管理器(Openbox是运行于搭载X11的GNU/Linux上的轻巧窗口管理器)</span><br><span class="line">[root@localhost ~]<span class="comment"># dnf -y install openbox</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 将默认openbox的配置文件做备份</span><br><span class="line">[root@localhost ~]<span class="comment"># mv /etc/X11/xinit/Xsession /etc/X11/xinit/Xsession.bak</span></span><br><span class="line"></span><br><span class="line">- 重新编写启动会话文件</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/X11/xinit/Xsession</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">exec</span> openbox-session			👈	开机执行Openbox桌面会话;一定要这么设置,否则是不会进入openbox桌面</span><br><span class="line"></span><br><span class="line">- 备份openbox默认xml文件</span><br><span class="line">[root@localhost ~]<span class="comment"># mv /etc/xdg/openbox/menu.xml /etc/xdg/openbox/menu.xml.bak</span></span><br><span class="line"></span><br><span class="line">- 自定义xml文件</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/xdg/openbox/menu.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;openbox_menu xmlns=<span class="string">&quot;http://openbox.org/3.4/menu&quot;</span>&gt;</span><br><span class="line">&lt;menu <span class="built_in">id</span>=<span class="string">&quot;root-menu&quot;</span> label=<span class="string">&quot;Openbox 3&quot;</span>&gt;</span><br><span class="line">  &lt;separator label=<span class="string">&quot;Tools&quot;</span>/&gt;</span><br><span class="line">  &lt;item label=<span class="string">&quot;Terminal&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;Execute&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="built_in">command</span>&gt;xfce4-terminal&lt;/command&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">  &lt;item label=<span class="string">&quot;VNC Viewer&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;Execute&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="built_in">command</span>&gt;vncviewer&lt;/command&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">  &lt;separator label=<span class="string">&quot;Others&quot;</span>/&gt;</span><br><span class="line">  &lt;item label=<span class="string">&quot;Reconfigure&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;Reconfigure&quot;</span> /&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">  &lt;item label=<span class="string">&quot;Exit&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;Exit&quot;</span>&gt;</span><br><span class="line">      &lt;prompt&gt;<span class="built_in">yes</span>&lt;/prompt&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">  &lt;separator/&gt;</span><br><span class="line">  &lt;item label=<span class="string">&quot;Log Out&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;SessionLogout&quot;</span>&gt;</span><br><span class="line">      &lt;prompt&gt;<span class="built_in">yes</span>&lt;/prompt&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">&lt;/menu&gt;</span><br><span class="line"></span><br><span class="line">&lt;/openbox_menu&gt;</span><br><span class="line"></span><br><span class="line">- 重启xrdp服务</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart xrdp</span></span><br></pre></td></tr></table></figure>



<p><strong>此时可以顺利进入界面了，不过进入后打开终端会提示<font color="red">没有文件或目录执行vncviewer子进程</font></strong></p>
<img src="/2022/10/07/Windows%20Remote%20Linux/fail%20to%20execute.gif" alt="fail to execute" style="zoom:80%;">





<p><strong>所以我们还需安装其他的组件，以支持终端操作配置</strong></p>
<p><strong><font color="purple">安装其它组件</font></strong></p>
<blockquote>
<p>xfce4-terminal 是一个轻量级和易于使用的终端模拟器应用程序</p>
<p>Tint2 是一个轻量级面板和任务栏，它可以为任何窗口管理器提供一致的体验</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 安装xfce4-terminal</span><br><span class="line">[root@localhost ~]<span class="comment"># dnf -y install xfce4-terminal</span></span><br><span class="line"></span><br><span class="line">- 安装tint2.x86_64</span><br><span class="line"><span class="comment"># 注意: tint2软件包在高版本的 CentOS Stream9 下无法安装,这是版本过新的问题,暂时无法解决; centos 7 可以安装,centos 8 没试过</span></span><br><span class="line"><span class="string">&#x27;不过不影响,只需xfce-terminal即可顺利使用终端了&#x27;</span></span><br><span class="line"></span><br><span class="line">- 重启xrdp服务</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart xrdp</span></span><br><span class="line"></span><br><span class="line">- 因为是最小化安装,默认是没有firefox浏览器,手动安装即可!</span><br><span class="line">[root@localhost ~]<span class="comment"># dnf -y install firefox</span></span><br></pre></td></tr></table></figure>

<img src="/2022/10/07/Windows%20Remote%20Linux/success.gif" alt="success" style="zoom:80%;">































]]></content>
      <categories>
        <category>RDP</category>
      </categories>
      <tags>
        <tag>xrdp</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix 监控</title>
    <url>/2022/11/11/zabbix/</url>
    <content><![CDATA[<p>今天来部署 Zabbix 来监控我的服务器；</p>
<blockquote>
<p>Zabbix 官网手册：<a href="https://www.zabbix.com/cn/manuals">https://www.zabbix.com/cn/manuals</a> ；其中 LTS（Long Term Support）是长期支持版本。</p>
<p>我们的服务器环境依旧是 <strong>CentOS Stream 8</strong>，安装 Zabbix 的版本是 <strong>4.0 LTS</strong></p>
</blockquote>
<h2 id="安装-zabbix-4-0-版本"><a href="#安装-zabbix-4-0-版本" class="headerlink" title="安装 zabbix 4.0 版本"></a>安装 zabbix 4.0 版本</h2><h3 id="服务端部署流程"><a href="#服务端部署流程" class="headerlink" title="服务端部署流程"></a>服务端部署流程</h3><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.安装zabbix.repo仓库文件,清华源的zabbix4版本(如果是其它操作系统,则选择对应版本的rpm包)</span><br><span class="line">[root@stream8 ~]<span class="comment"># rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/8/x86_64/zabbix-release-4.0-2.el8.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">此时,yum仓库会多一个zabbix.repo文件</span><br><span class="line">[root@stream8 ~]<span class="comment"># cat /etc/yum.repos.d/zabbix.repo </span></span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix Official Repository - <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://repo.zabbix.com/zabbix/4.0/rhel/8/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591</span><br><span class="line"></span><br><span class="line">[zabbix-non-supported]</span><br><span class="line">name=Zabbix Official Repository non-supported - <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://repo.zabbix.com/non-supported/rhel/8/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">替换zabbix的来源路径为清华的源(因为zabbix官网的服务器在国外)</span><br><span class="line">[root@stream8 ~]<span class="comment"># sed -i &#x27;s#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g&#x27; /etc/yum.repos.d/zabbix.repo</span></span><br><span class="line"></span><br><span class="line">2.安装zabbix服务端(前端)、zabbix连接数据库、zabbix-agent(客户端)</span><br><span class="line">[root@stream8 ~]<span class="comment"># dnf -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent mariadb-server</span></span><br><span class="line"><span class="comment"># zabbix 4.0默认是lamp,所以这一步会自动安装httpd,在5.0版本则不会安装httpd</span></span><br><span class="line"></span><br><span class="line">启动mariadb数据库,设置开机自启</span><br><span class="line">[root@stream8 ~]<span class="comment"># systemctl start mariadb &amp; systemctl enable mariadb</span></span><br><span class="line"></span><br><span class="line">3.设置mariadb数据库密码(默认账号是root),创建zabbix库(设置字符集是utf8),存储监控数据,且创建账号</span><br><span class="line">[root@stream8 ~]<span class="comment"># mysqladmin password redhat	</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># mysql -uroot -predhat -e &quot;create database zabbix character set utf8 collate utf8_bin;&quot;</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># mysql -uroot -predhat -e &quot;grant all privileges on zabbix.* to zabbix@localhost identified by &#x27;redhat&#x27;;&quot;</span></span><br><span class="line"></span><br><span class="line">测试zabbix用户</span><br><span class="line">[root@stream8 ~]<span class="comment"># mysql -uroot -predhat -e &quot;show databases;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| zabbix             |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">4.导入zabbix的数据库</span><br><span class="line">这里因为Stream8版本原因,zcat读取create.sql.gz会报错<span class="string">&quot;导入的数据行太长了&quot;</span>,修改一下mysql的配置文件并重启服务即可解决;</span><br><span class="line">[root@stream8 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">...添加下几行</span><br><span class="line">[mysqld]</span><br><span class="line">innodb_strict_mode = 0</span><br><span class="line"></span><br><span class="line">[root@stream8 ~]<span class="comment"># systemctl restart mariadb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在CentOS 7版本则不会出现以上问题</span></span><br><span class="line"><span class="comment"># 用zcat直接读取gz压缩包,管道符交给mysql命令导入数据,往zabbix库中导入数据</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uroot -predhat zabbix</span></span><br><span class="line"></span><br><span class="line">查看导入zabbix数据库的表;</span><br><span class="line">[root@stream8 ~]<span class="comment"># mysql -uroot -predhat -e &quot;show tables from zabbix;&quot;</span></span><br><span class="line">...</span><br><span class="line">| <span class="built_in">users</span>                      |</span><br><span class="line">| users_groups               |</span><br><span class="line">| usrgrp                     |</span><br><span class="line">| valuemaps                  |</span><br><span class="line">| widget                     |</span><br><span class="line">| widget_field               |</span><br><span class="line">+----------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 编辑zabbix-server服务端配置文件(修改数据库部分即可)	</span><br><span class="line">[root@stream8 ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># DBHost=localhost			数据库主机,默认未开启</span></span><br><span class="line">DBHost=localhost			启动,指定为本机</span><br><span class="line"></span><br><span class="line"><span class="comment"># DBPassword=				数据库密码,默认未开启</span></span><br><span class="line">DBPassword=redhat			开启,设置zabbix数据库密码</span><br><span class="line"></span><br><span class="line">修改完,也可以直接替换源文件为以下有效的内容,直观明了</span><br><span class="line">[root@stream8 ~]<span class="comment"># grep &quot;^[a-Z]&quot; /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">LogFile=/var/log/zabbix/zabbix_server.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_server.pid</span><br><span class="line">SocketDir=/var/run/zabbix</span><br><span class="line">DBHost=localhost		<span class="comment"># 指定mysql的地址</span></span><br><span class="line">DBName=zabbix			<span class="comment"># 数据库名字</span></span><br><span class="line">DBUser=zabbix			<span class="comment"># 数据库的连接用户</span></span><br><span class="line">DBPassword=redhat		<span class="comment"># 数据库密码</span></span><br><span class="line">SNMPTrapperFile=/var/log/snmptrap/snmptrap.log		<span class="comment"># 存放自定义监控项的目录</span></span><br><span class="line">Timeout=4</span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br><span class="line">ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line"></span><br><span class="line">6.启动zabbix服务,且开机自启</span><br><span class="line">[root@stream8 ~]<span class="comment"># systemctl start zabbix-server &amp; systemctl enable zabbix-server</span></span><br><span class="line"></span><br><span class="line">7.检查zabbix(zabbix服务端的端口<span class="string">&#x27;10051&#x27;</span>)</span><br><span class="line">[root@stream8 ~]<span class="comment"># netstat -nltp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1131/sshd           </span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      13601/zabbix_server </span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      9999/mysqld         </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1131/sshd           </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN      13601/zabbix_server </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>至此，zabbix-server 服务端核心程序就装好了，以及 zabbix-UI 这个php程序也装好了；</p>
<p>还需配置 web 前端，默认 zabbix 4.0 版本只支持 apache，不同 zabbix 版本 web 前端代理不一样（nginx、apache）</p>
</blockquote>
<p><strong>Apache 配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.修改PHP时区</span><br><span class="line">[root@stream8 ~]<span class="comment"># vim /etc/php.ini </span></span><br><span class="line">...</span><br><span class="line">;date.timezone =				<span class="comment"># 找到时区这一行(默认是未开启的)</span></span><br><span class="line">date.timezone = Asia/Shanghai	<span class="comment"># 设置为亚洲/上海	</span></span><br><span class="line"></span><br><span class="line">如果后续手动修改了时区,需要重启php的服务</span><br><span class="line">[root@stream8 ~]<span class="comment"># systemctl restart php-fpm</span></span><br><span class="line"></span><br><span class="line">2.重启apache服务</span><br><span class="line"><span class="comment"># 查看apache子目录zabbix的配置</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># cat /etc/httpd/conf.d/zabbix.conf </span></span><br><span class="line">...</span><br><span class="line">Alias /zabbix /usr/share/zabbix	 	可以看到访问/zabbix,会转发到/usr/share/zabbix目录</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">&quot;/usr/share/zabbix&quot;</span>&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line"></span><br><span class="line">    &lt;FilesMatch \.(php|phar)$&gt;</span><br><span class="line">        SetHandler <span class="string">&quot;proxy:unix:/run/php-fpm/zabbix.sock|fcgi://localhost&quot;</span></span><br><span class="line">    &lt;/FilesMatch&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@stream8 ~]<span class="comment"># systemctl start httpd &amp; systemctl enable httpd</span></span><br></pre></td></tr></table></figure>



<p><strong>访问服务器的<code>IP</code>加<code>/zabbix</code></strong></p>
<img src="/2022/11/11/zabbix/image-20221111230949455.png" alt="image-20221111230949455" style="zoom:150%;">



<img src="/2022/11/11/zabbix/image-20221111231310604.png" alt="image-20221111231310604" style="zoom:150%;">



<img src="/2022/11/11/zabbix/image-20221111231714873.png" alt="image-20221111231714873" style="zoom:150%;">



<img src="/2022/11/11/zabbix/image-20221111231948330.png" alt="image-20221111231948330" style="zoom:150%;">



<p><img src="/2022/11/11/zabbix/image-20221111232031222.png" alt="image-20221111232031222"></p>
<p><img src="/2022/11/11/zabbix/image-20221111232105026.png" alt="image-20221111232105026"></p>
<img src="/2022/11/11/zabbix/image-20221111232259952.png" alt="image-20221111232259952" style="zoom:150%;">



<blockquote>
<p>后面会教大家，如何在后端修改 Zabbix 的 Admin 用户的密码</p>
</blockquote>
<img src="/2022/11/11/zabbix/image-20221111232456595.png" alt="image-20221111232456595" style="zoom:150%;">



<img src="/2022/11/11/zabbix/image-20221111232832617.png" alt="image-20221111232832617" style="zoom:150%;">



<blockquote>
<p>如果 web 界面不能选择使用中文，则需要手动安装中文语言包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装zh_CN语言包</span><br><span class="line">[root@stream8 ~]<span class="comment"># dnf install langpacks-zh_CN.noarch -y</span></span><br><span class="line"></span><br><span class="line">然后刷新web界面,就能选择中文了</span><br></pre></td></tr></table></figure>



<p><strong>修改图形的数据展示（默认字体有问题）</strong></p>
<img src="/2022/11/11/zabbix/image-20221111234231331.png" alt="image-20221111234231331" style="zoom:150%;">



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载字体,修改zabbix的字体支持(因为缺少zabbix所需的字体)</span><br><span class="line"><span class="comment"># 文泉仪微字体</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># yum install wqy-microhei-fonts -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝下载的字体覆盖zabbix的图形字体</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/zabbix/assets/fonts/graphfont.ttf </span></span><br><span class="line"><span class="built_in">cp</span>: overwrite <span class="string">&#x27;/usr/share/zabbix/assets/fonts/graphfont.ttf&#x27;</span>? y</span><br></pre></td></tr></table></figure>



<p>刷新 web 界面，可以看到乱码的中文字体生效了</p>
<img src="/2022/11/11/zabbix/image-20221111234958289.png" alt="image-20221111234958289" style="zoom:150%;">



<h3 id="修改-Zabbix-默认-Admin-用户的密码"><a href="#修改-Zabbix-默认-Admin-用户的密码" class="headerlink" title="修改 Zabbix 默认 Admin 用户的密码"></a>修改 Zabbix 默认 Admin 用户的密码</h3><blockquote>
<p>zabbix部署后，使用默认的 Admin 账户登录，密码默认是 zabbix；</p>
</blockquote>
<p><strong>数据库重置 zabbix web用户</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先,进入zabbix数据库,查看当前<span class="built_in">users</span>表的信息</span><br><span class="line">[root@stream8 ~]<span class="comment"># mysql -uroot -predhat </span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection <span class="built_in">id</span> is 385</span><br><span class="line">Server version: 10.3.28-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use zabbix;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [zabbix]&gt; select * from <span class="built_in">users</span>;</span><br><span class="line">+--------+-------+--------+---------------+----------------------------------+-----+-----------+------------+-------+---------+------+---------+----------------+---------------+---------------+---------------+</span><br><span class="line">| userid | <span class="built_in">alias</span> | name   | surname       | passwd                           | url | autologin | autologout | lang  | refresh | <span class="built_in">type</span> | theme   | attempt_failed | attempt_ip    | attempt_clock | rows_per_page |</span><br><span class="line">+--------+-------+--------+---------------+----------------------------------+-----+-----------+------------+-------+---------+------+---------+----------------+---------------+---------------+---------------+</span><br><span class="line">|      1 | Admin | Zabbix | Administrator | 5fce1b3e34b520afeffb37ce08c7cd66 |     |         1 | 0          | zh_CN | 30s     |    3 | default |              0 | 27.38.213.189 |    1668181951 |            50 |</span><br><span class="line">|      2 | guest |        |               | d41d8cd98f00b204e9800998ecf8427e |     |         0 | 15m        | en_GB | 30s     |    1 | default |              0 |               |             0 |            50 |</span><br><span class="line">+--------+-------+--------+---------------+----------------------------------+-----+-----------+------------+-------+---------+------+---------+----------------+---------------+---------------+---------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到用户表中的用户Admin的密码是通过MD5加密的</span></span><br></pre></td></tr></table></figure>



<p><a href="https://www.cmd5.com/">【MD5 在线加密及解密】</a></p>
<p>通过 MD5 反解 Admin 用户的数据库密码</p>
<p><img src="/2022/11/11/zabbix/image-20221112000032655.png" alt="image-20221112000032655"></p>
<blockquote>
<p>这里学习一下在 Linux 中生成 MD5 值</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以使用命令生成md5值(如下,生成明文genmd5的md5值)</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># echo -n genmd5 | openssl md5</span></span><br><span class="line">(stdin)= caf22338e37c42b2f2e9358ba6bedb04</span><br></pre></td></tr></table></figure>



<p><strong>手动更新 zabbix Admin 用户的密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">设置md5的密码为<span class="string">&#x27;Aa123!&#x27;</span></span><br><span class="line">[root@stream8 ~]<span class="comment"># echo -n Aa123! | openssl md5</span></span><br><span class="line">(stdin)= 675278e2a74b19cfa0a5f766424c67cc</span><br><span class="line"></span><br><span class="line">[root@stream8 ~]<span class="comment"># mysql -uroot -predhat</span></span><br><span class="line">MariaDB [(none)]&gt; use zabbix;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新zabbix web用户登录密码</span></span><br><span class="line">MariaDB [zabbix]&gt; update <span class="built_in">users</span> <span class="built_in">set</span> passwd=<span class="string">&#x27;675278e2a74b19cfa0a5f766424c67cc&#x27;</span> <span class="built_in">where</span> userid = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">Query OK, 1 row affected (0.003 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [zabbix]&gt; select * from <span class="built_in">users</span>;</span><br><span class="line">+--------+-------+--------+---------------+----------------------------------+-----+-----------+------------+-------+---------+------+---------+----------------+---------------+---------------+---------------+</span><br><span class="line">| userid | <span class="built_in">alias</span> | name   | surname       | passwd                           | url | autologin | autologout | lang  | refresh | <span class="built_in">type</span> | theme   | attempt_failed | attempt_ip    | attempt_clock | rows_per_page |</span><br><span class="line">+--------+-------+--------+---------------+----------------------------------+-----+-----------+------------+-------+---------+------+---------+----------------+---------------+---------------+---------------+</span><br><span class="line">|      1 | Admin | Zabbix | Administrator | 675278e2a74b19cfa0a5f766424c67cc |     |         1 | 0          | zh_CN | 30s     |    3 | default |              0 | 27.38.213.189 |    1668181951 |            50 |</span><br><span class="line">|      2 | guest |        |               | d41d8cd98f00b204e9800998ecf8427e |     |         0 | 15m        | en_GB | 30s     |    1 | default |              0 |               |             0 |            50 |</span><br><span class="line">+--------+-------+--------+---------------+----------------------------------+-----+-----------+------------+-------+---------+------+---------+----------------+---------------+---------------+---------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">MariaDB [zabbix]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br></pre></td></tr></table></figure>



<p><strong>登录测试 ！</strong></p>
<img src="/2022/11/11/zabbix/image-20221112001106389.png" alt="image-20221112001106389" style="zoom:200%;">



<img src="/2022/11/11/zabbix/image-20221112001119489.png" alt="image-20221112001119489" style="zoom:150%;">



<h2 id="安装-zabbix-5-0-版本"><a href="#安装-zabbix-5-0-版本" class="headerlink" title="安装 zabbix 5.0 版本"></a>安装 zabbix 5.0 版本</h2><p>5.0 版本对基础环境的要求有很大的变化，最大的就是对 php 版本的要求，最低要求 7.2.0 版本，对 php 扩展组件也有要求；</p>
<p>详见官网文档：<a href="https://www.zabbix.com/documentation/5.0/zh/manual/installation/requirements">https://www.zabbix.com/documentation/5.0/zh/manual/installation/requirements</a></p>
<p><strong>环境介绍</strong></p>
<p>1 台 server，2 台 agent，系统是 CentOS Stream 8</p>
<p><strong>server：</strong> 10.0.0.10/24</p>
<p><strong>agent1：</strong>10.0.0.11/24</p>
<p><strong>agent2：</strong>10.0.0.12/24</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.环境准备</span><br><span class="line">关闭防火墙(三台机器)</span><br><span class="line">[root@server ~]<span class="comment"># sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span></span><br><span class="line">[root@server ~]<span class="comment"># systemctl disable --now firewalld</span></span><br><span class="line"></span><br><span class="line">此时获取当前selinux防火墙的安全策略仍为Enforcing,配置文件并未生效</span><br><span class="line">[root@server ~]<span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line">获取zabbix的下载源</span><br><span class="line">[root@server ~]<span class="comment"># rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/8/x86_64/zabbix-release-5.0-1.el8.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">更换zabbix.repo源</span><br><span class="line">[root@server ~]<span class="comment"># sed -i &#x27;s#http://repo.zabbix.com#https://mirrors.aliyun.com/zabbix#&#x27; /etc/yum.repos.d/zabbix.repo</span></span><br><span class="line"></span><br><span class="line">2.安装zabbix server和agent</span><br><span class="line">[root@server ~]<span class="comment"># dnf -y install zabbix-server-mysql zabbix-agent</span></span><br><span class="line"></span><br><span class="line">3.安装zabbix前端环境</span><br><span class="line">[root@server ~]<span class="comment"># dnf -y install zabbix-web-mysql zabbix-apache-conf</span></span><br></pre></td></tr></table></figure>





<blockquote>
<p>如果是 CentOS 7 版本，则需要安装 Software Collections，便于后续安装高版本的 php，默认 yum 安装的 php 版本为 5.4 过低。SCL（Software Collections）可以让你在同一个操作系统上安装和使用多个版本的软件，而不会影响整个系统的软件包。</p>
<p>为了避免系统广泛冲突，包安装在 /opt/rh 目录中，例如，这允许你在 CentOS 7 机器上安装 Python3.5，而不会删除或干扰 Python 2.7.</p>
<p><code>yum -y install centos-release-scl</code></p>
<p><strong>这就是 zabbix 5.0 和 4.0 的区别之一，不过因为我们的系统是 CentOS Steam 8，直接安装 php 刚好就是 7.2 版本，所以不存在这个问题🤣</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4.安裝zabbix所需的数据库</span><br><span class="line">[root@server ~]<span class="comment"># dnf -y install mariadb-server</span></span><br><span class="line"></span><br><span class="line">5.配置数据库</span><br><span class="line">[root@server ~]<span class="comment"># systemctl enable --now mariadb</span></span><br><span class="line"></span><br><span class="line">初始化数据库,设置密码</span><br><span class="line">[root@server ~]<span class="comment"># mysql_secure_installation </span></span><br><span class="line">...</span><br><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none): 【回车,默认是空】</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y	【设置root密码】</span><br><span class="line">New password:  			【redhat】</span><br><span class="line">Re-enter new password: 		【redhat】</span><br><span class="line">Password updated successfully!</span><br><span class="line"></span><br><span class="line">Remove anonymous <span class="built_in">users</span>? [Y/n] y			【Y,移除匿名用户】</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n		【n,不禁止root远程登录】</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] y	【Y,删除<span class="built_in">test</span>数据库】</span><br><span class="line"> - Dropping <span class="built_in">test</span> database...</span><br><span class="line"> ... Success!</span><br><span class="line"> - Removing privileges on <span class="built_in">test</span> database...</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y		【Y,确认刷新授权表】</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">登录数据库</span><br><span class="line">[root@server ~]<span class="comment"># mysql -uroot -predhat</span></span><br><span class="line"></span><br><span class="line">创建zabbix数据库</span><br><span class="line">MariaDB [(none)]&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">Query OK, 1 row affected (0.001 sec)</span><br><span class="line"></span><br><span class="line">添加数据库用户,以及zabbix所需的数据库信息</span><br><span class="line">MariaDB [(none)]&gt; create user zabbix@localhost identified by <span class="string">&quot;redhat&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">6.使用zabbix-mysql命令,导入数据库信息</span><br><span class="line">[root@server ~]<span class="comment"># zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uzabbix -predhat zabbix</span></span><br><span class="line"></span><br><span class="line">[root@server ~]<span class="comment"># mysql -uroot -predhat -e &quot;show tables from zabbix;&quot;</span></span><br><span class="line">| <span class="built_in">users</span>                      |</span><br><span class="line">| users_groups               |</span><br><span class="line">| usrgrp                     |</span><br><span class="line">| valuemaps                  |</span><br><span class="line">| widget                     |</span><br><span class="line">| widget_field               |</span><br><span class="line">+----------------------------+</span><br><span class="line"></span><br><span class="line">7.修改zabbix server配置文件,修改数据库密码</span><br><span class="line">[root@server ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf </span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># DBPassword=</span></span><br><span class="line">DBPassword=redhat		指定数据库密码</span><br><span class="line"></span><br><span class="line">8.修改zabbix的php配置文件</span><br><span class="line">[root@server ~]<span class="comment"># vim /etc/php-fpm.d/zabbix.conf </span></span><br><span class="line">; php_value[date.timezone] = Europe/Riga		默认是注释的<span class="string">&quot;;&quot;</span></span><br><span class="line">php_value[date.timezone] = Asia/Shanghai		将时区改成亚洲/上海</span><br><span class="line"></span><br><span class="line">9.启动zabbix服务</span><br><span class="line"><span class="comment"># zabbix前端请求是交给php解析</span></span><br><span class="line">[root@server ~]<span class="comment"># ls /etc/systemd/system | grep php</span></span><br><span class="line">php-fpm.service.d</span><br><span class="line">[root@server ~]<span class="comment"># systemctl start zabbix-server zabbix-agent httpd php-fpm </span></span><br><span class="line">[root@server ~]<span class="comment"># systemctl enable zabbix-server zabbix-agent httpd php-fpm</span></span><br><span class="line"></span><br><span class="line">10.访问zabbix界面,和4.0一致,IP + /zabbix</span><br></pre></td></tr></table></figure>

<img src="/2022/11/11/zabbix/image-20221114141325025.png" alt="image-20221114141325025" style="zoom:150%;">



<p>后续参考 zabbix4.0 步骤</p>
<img src="/2022/11/11/zabbix/image-20221114141628067.png" alt="image-20221114141628067" style="zoom:150%;">



<img src="/2022/11/11/zabbix/image-20221114141857519.png" alt="image-20221114141857519" style="zoom: 200%;">













































































]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
</search>
